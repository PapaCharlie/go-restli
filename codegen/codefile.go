package codegen

import (
	"bytes"
	"fmt"
	. "github.com/dave/jennifer/jen"
	"github.com/pkg/errors"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"unicode"
)

const (
	Unmarshal             = "Unmarshal"
	UnmarshalJSON         = "UnmarshalJSON"
	Marshal               = "Marshal"
	MarshalJSON           = "MarshalJSON"
	PopulateDefaultValues = "populateDefaultValues"
	NetHttp               = "net/http"
	EncodingJson          = "encoding/json"
)

var (
	PackagePrefix    = ""
	CommentWrapWidth = 120
)

type CodeFile struct {
	SourceFilename string
	PackagePath    string
	Filename       string
	Code           *Statement
}

func NewCodeFile(filename string, packageSegments ...string) (*CodeFile) {
	return &CodeFile{
		PackagePath: filepath.Join(packageSegments...),
		Filename:    filename,
		Code:        Empty(),
	}
}

func (f *CodeFile) Write(outputDir string) (filename string, err error) {
	file := NewFilePath(f.PackagePath)

	file.HeaderComment(fmt.Sprintf(`DO NOT EDIT

Code automatically generated by go-restli
Soure file: %s`, f.SourceFilename))

	file.Add(f.Code)
	filename = filepath.Join(outputDir, f.PackagePath, f.Filename+".go")

	err = write(filename, file)
	return
}

func write(filename string, file *File) error {
	b := bytes.NewBuffer(nil)
	if err := file.Render(b); err != nil {
		return errors.WithStack(err)
	}

	if err := os.MkdirAll(filepath.Dir(filename), os.ModePerm); err != nil {
		return errors.WithStack(err)
	}

	os.Remove(filename)
	if err := ioutil.WriteFile(filename, b.Bytes(), os.FileMode(0555)); err != nil {
		return errors.WithStack(err)
	}

	return nil
}

func AddWordWrappedComment(code *Statement, comment string) *Statement {
	if comment != "" {
		code.Comment(comment)
		return code
	} else {
		return code
	}

	// WIP: Restli comments are not behaving quite as expected, so comments get added as is, without being wrapped
	for len(comment) > CommentWrapWidth {
		if newline := strings.Index(comment[:CommentWrapWidth], "\n"); newline != -1 {
			code.Comment(comment[:newline]).Line()
			comment = comment[newline+1:]
			continue
		}

		if index := strings.LastIndexFunc(comment[:CommentWrapWidth], unicode.IsSpace); index > 0 {
			code.Comment(comment[:index]).Line()
			comment = comment[index+1:]
		} else {
			break
		}
	}

	code.Comment(comment)

	return code
}

func ExportedIdentifier(identifier string) string {
	return strings.ToUpper(identifier[:1]) + identifier[1:]
}

func PrivateIdentifier(identifier string) string {
	return strings.ToLower(identifier[:1]) + identifier[1:]
}

func JsonTag(fieldName string, omitIfEmpty bool) map[string]string {
	if omitIfEmpty {
		fieldName += ",omitempty"
	}
	return map[string]string{"json": fieldName}
}

func AddMarshalJSON(def *Statement, receiver, typeName string, f func(*Group)) *Statement {
	def.Func().
		Params(Id(receiver).Op("*").Id(typeName)).
		Id(MarshalJSON).Params().
		Params(Id("data").Index().Byte(), Err().Error()).
		BlockFunc(f)
	return def
}

func AddUnmarshalJSON(def *Statement, receiver, typeName string, f func(*Group)) *Statement {
	def.Func().
		Params(Id(receiver).Op("*").Id(typeName)).
		Id(UnmarshalJSON).Params(Id("data").Index().Byte()).
		Params(Err().Error()).
		BlockFunc(f)
	return def
}

func AddStringer(def *Statement, receiver, typeName string, f func(*Group)) *Statement {
	def.Func().
		Params(Id(receiver).Op("*").Id(typeName)).
		Id("String").Params().String().
		BlockFunc(f)
	return def
}

func IfErrReturn(c *Group) (*Group) {
	c.If(Err().Op("!=").Nil()).Block(Return())
	return c
}
