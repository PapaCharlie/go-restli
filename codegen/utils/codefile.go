package utils

import (
	"bytes"
	"html/template"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"unicode"

	. "github.com/dave/jennifer/jen"
	"github.com/pkg/errors"
)

const ReadOnlyPermissions = os.FileMode(0444)

var (
	Logger = log.New(os.Stderr, "[go-restli] ", log.LstdFlags|log.Lshortfile)

	PackagePrefix string

	CommentWrapWidth = 120

	HeaderTemplate = template.Must(template.New("header").Parse(`DO NOT EDIT

Code automatically generated by github.com/PapaCharlie/go-restli
Source file: {{.SourceFile}}`))
)

type CodeFile struct {
	SourceFile  string
	PackagePath string
	Filename    string
	Code        *Statement
}

func (f *CodeFile) Write(outputDir string) (err error) {
	defer func() {
		e := recover()
		if e != nil {
			err = errors.Errorf("go-restli: Could not generate model: %+v", e)
		}
	}()
	file := NewFilePath(f.PackagePath)

	header := bytes.NewBuffer(nil)
	err = HeaderTemplate.Execute(header, f)
	if err != nil {
		return err
	}

	file.HeaderComment(header.String())
	file.Add(f.Code)

	relpath, err := filepath.Rel(PackagePrefix, f.PackagePath)
	if err != nil {
		return err
	}

	filename := filepath.Join(outputDir, relpath, f.Filename+".go")
	err = WriteJenFile(filename, file)
	if err != nil {
		return errors.Wrapf(err, "go-restli: Failed to write code file to %q", filename)
	}

	return nil
}

func (f *CodeFile) Identifier() string {
	return f.PackagePath + "." + f.Filename
}

func WriteJenFile(filename string, file *File) error {
	b := bytes.NewBuffer(nil)
	if err := file.Render(b); err != nil {
		return errors.WithStack(err)
	}

	if err := os.MkdirAll(filepath.Dir(filename), os.ModePerm); err != nil {
		return errors.WithStack(err)
	}

	_ = os.Remove(filename)

	if err := ioutil.WriteFile(filename, b.Bytes(), ReadOnlyPermissions); err != nil {
		return errors.WithStack(err)
	}

	return nil
}

func AddWordWrappedComment(code *Statement, comment string) *Statement {
	if comment != "" {
		code.Comment(comment)
		return code
	} else {
		return code
	}

	// WIP: RestLi comments are not behaving quite as expected, so comments get added as is, without being wrapped
	for len(comment) > CommentWrapWidth {
		if newline := strings.Index(comment[:CommentWrapWidth], "\n"); newline != -1 {
			code.Comment(comment[:newline]).Line()
			comment = comment[newline+1:]
			continue
		}

		if index := strings.LastIndexFunc(comment[:CommentWrapWidth], unicode.IsSpace); index > 0 {
			code.Comment(comment[:index]).Line()
			comment = comment[index+1:]
		} else {
			break
		}
	}

	code.Comment(comment)

	return code
}

func ExportedIdentifier(identifier string) string {
	buf := new(strings.Builder)
	for i, c := range identifier {
		switch {
		case unicode.IsLetter(c):
			if i == 0 {
				buf.WriteRune(unicode.ToUpper(c))
			} else {
				buf.WriteRune(c)
			}
		case unicode.IsNumber(c):
			if i == 0 {
				buf.WriteString("Exported_")
			}
			buf.WriteRune(c)
		case c == '_':
			if i == 0 {
				buf.WriteString("Exported")
			}
			buf.WriteRune(c)
		// Because $ is a valid identifier character in Java, it technically does not cause compile error and is
		// therefore occasionally used. To support this usecase, explicitly handle $ by replacing it with DOLLAR. All
		// other non-alphanumeric (plus _) characters are considered illegal
		case c == '$':
			if i != 0 {
				buf.WriteRune('_')
			}
			buf.WriteString("DOLLAR_")
		default:
			log.Panicf("Illegal identifier character %q in %q", c, identifier)
		}
	}
	return buf.String()
}

func ReceiverName(typeName string) string {
	return strings.ToLower(typeName[:1])
}

func AddFuncOnReceiver(def *Statement, receiver, typeName, funcName string) *Statement {
	return def.Func().
		Params(Id(receiver).Op("*").Id(typeName)).
		Id(funcName)
}

func AddStringer(def *Statement, receiver, typeName string, f func(def *Group)) *Statement {
	return AddFuncOnReceiver(def, receiver, typeName, "String").
		Params().
		String().
		BlockFunc(f)
}

func AddPointer(def *Statement, receiver, typeName string) *Statement {
	def.Comment("Pointer returns a pointer to the given receiver, useful for inlining setting optional fields.").Line()
	def.Func().
		Params(Id(receiver).Id(typeName)).
		Id("Pointer").Params().
		Op("*").Id(typeName).
		BlockFunc(func(def *Group) {
			def.Return(Op("&").Id(receiver))
		}).Line().Line()
	return def
}

func IfErrReturn(results ...Code) *Statement {
	return If(Err().Op("!=").Nil()).Block(Return(results...))
}

func JsonFieldTag(name string, optional bool) map[string]string {
	tags := map[string]string{"json": name}
	if optional {
		tags["json"] += ",omitempty"
	}
	return tags
}
