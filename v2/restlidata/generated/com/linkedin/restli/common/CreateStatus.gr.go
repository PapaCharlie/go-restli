/*
Code generated by "github.com/PapaCharlie/go-restli/v2"; DO NOT EDIT.

Source file: /Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar
*/

package common

import (
	"github.com/PapaCharlie/go-restli/v2/fnv1a"
	"github.com/PapaCharlie/go-restli/v2/restli/equals"
	"github.com/PapaCharlie/go-restli/v2/restli/patch"
	"github.com/PapaCharlie/go-restli/v2/restlicodec"
)

// A rest.li create status.
type CreateStatus struct {
	Status int32

	Id *string
	// The location url to retrieve the newly created entity
	Location *string

	Error *ErrorResponse
}

func (c *CreateStatus) Equals(other *CreateStatus) bool {
	if c == other {
		return true
	}
	if c == nil || other == nil {
		return false
	}

	return c.Status == other.Status &&
		equals.ComparablePointer(c.Id, other.Id) &&
		equals.ComparablePointer(c.Location, other.Location) &&
		c.Error.Equals(other.Error)
}

func (c *CreateStatus) ComputeHash() fnv1a.Hash {
	if c == nil {
		return fnv1a.ZeroHash()
	}
	hash := fnv1a.NewHash()

	hash.AddInt32(c.Status)

	if c.Id != nil {
		hash.AddString(*c.Id)
	}

	if c.Location != nil {
		hash.AddString(*c.Location)
	}

	if c.Error != nil {
		hash.Add(c.Error.ComputeHash())
	}

	return hash
}

func (c *CreateStatus) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	if c.Error != nil {
		err = c.Error.MarshalRestLi(keyWriter("error"))
		if err != nil {
			return err
		}
	}
	if c.Id != nil {
		keyWriter("id").WriteString(*c.Id)
	}
	if c.Location != nil {
		keyWriter("location").WriteString(*c.Location)
	}
	keyWriter("status").WriteInt32(c.Status)
	return nil
}

func (c *CreateStatus) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(c.MarshalFields)
}

func (c *CreateStatus) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = c.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

var CreateStatusRequiredFields = restlicodec.NewRequiredFields().Add(
	"status",
)

func (c *CreateStatus) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "status":
		found = true
		c.Status, err = reader.ReadInt32()
	case "id":
		found = true
		c.Id = new(string)
		*c.Id, err = reader.ReadString()
	case "location":
		found = true
		c.Location = new(string)
		*c.Location, err = reader.ReadString()
	case "error":
		found = true
		c.Error = new(ErrorResponse)
		err = c.Error.UnmarshalRestLi(reader)
	}
	return found, err
}

func (c *CreateStatus) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	err = reader.ReadRecord(CreateStatusRequiredFields, func(reader restlicodec.Reader, field string) (err error) {
		found, err := c.UnmarshalField(reader, field)
		if err != nil {
			return err
		}
		if !found {
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}

	return nil
}

func (c *CreateStatus) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, c)
}

func (c *CreateStatus) NewInstance() *CreateStatus {
	return new(CreateStatus)
}

/*
================================================================================
PARTIAL UPDATE STRUCTS
================================================================================
*/

type CreateStatus_PartialUpdate_Delete_Fields struct {
	Id       bool
	Location bool
	Error    bool
}

func (c *CreateStatus_PartialUpdate_Delete_Fields) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteArray(func(itemWriter func() restlicodec.Writer) (err error) {
		if c.Error {
			itemWriter().WriteString("error")
		}
		if c.Id {
			itemWriter().WriteString("id")
		}
		if c.Location {
			itemWriter().WriteString("location")
		}
		return nil
	})
}

func (c *CreateStatus_PartialUpdate_Delete_Fields) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = c.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

func (c *CreateStatus_PartialUpdate_Delete_Fields) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	var field string
	return reader.ReadArray(func(reader restlicodec.Reader) (err error) {
		field, err = reader.ReadString()
		if err != nil {
			return err
		}

		switch field {
		case "id":
			c.Id = true
		case "location":
			c.Location = true
		case "error":
			c.Error = true
		}
		return nil
	})
}

func (c *CreateStatus_PartialUpdate_Delete_Fields) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, c)
}

func (c *CreateStatus_PartialUpdate_Delete_Fields) NewInstance() *CreateStatus_PartialUpdate_Delete_Fields {
	return new(CreateStatus_PartialUpdate_Delete_Fields)
}

type CreateStatus_PartialUpdate_Set_Fields struct {
	// status
	Status *int32
	// id
	Id *string
	// location
	Location *string
	// error
	Error *ErrorResponse
}

func (c *CreateStatus_PartialUpdate_Set_Fields) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	if c.Error != nil {
		err = c.Error.MarshalRestLi(keyWriter("error"))
		if err != nil {
			return err
		}
	}
	if c.Id != nil {
		keyWriter("id").WriteString(*c.Id)
	}
	if c.Location != nil {
		keyWriter("location").WriteString(*c.Location)
	}
	if c.Status != nil {
		keyWriter("status").WriteInt32(*c.Status)
	}
	return nil
}

func (c *CreateStatus_PartialUpdate_Set_Fields) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(c.MarshalFields)
}

func (c *CreateStatus_PartialUpdate_Set_Fields) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = c.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

var CreateStatus_PartialUpdate_Set_FieldsRequiredFields = restlicodec.NewRequiredFields()

func (c *CreateStatus_PartialUpdate_Set_Fields) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "status":
		found = true
		c.Status = new(int32)
		*c.Status, err = reader.ReadInt32()
	case "id":
		found = true
		c.Id = new(string)
		*c.Id, err = reader.ReadString()
	case "location":
		found = true
		c.Location = new(string)
		*c.Location, err = reader.ReadString()
	case "error":
		found = true
		c.Error = new(ErrorResponse)
		err = c.Error.UnmarshalRestLi(reader)
	}
	return found, err
}

func (c *CreateStatus_PartialUpdate_Set_Fields) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	err = reader.ReadRecord(CreateStatus_PartialUpdate_Set_FieldsRequiredFields, func(reader restlicodec.Reader, field string) (err error) {
		found, err := c.UnmarshalField(reader, field)
		if err != nil {
			return err
		}
		if !found {
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}

	return nil
}

func (c *CreateStatus_PartialUpdate_Set_Fields) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, c)
}

func (c *CreateStatus_PartialUpdate_Set_Fields) NewInstance() *CreateStatus_PartialUpdate_Set_Fields {
	return new(CreateStatus_PartialUpdate_Set_Fields)
}

// CreateStatus_PartialUpdate is used to represent a partial update on CreateStatus. Toggling the value of a field
// in Delete represents selecting it for deletion in a partial update, while
// setting the value of a field in Update represents setting that field in the
// current struct. Other fields in this struct represent record fields that can
// themselves be partially updated.
type CreateStatus_PartialUpdate struct {
	Delete_Fields CreateStatus_PartialUpdate_Delete_Fields
	Set_Fields    CreateStatus_PartialUpdate_Set_Fields
	Error         *ErrorResponse_PartialUpdate
}

func (c *CreateStatus_PartialUpdate) MarshalRestLiPatch(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		checker := patch.PartialUpdateFieldChecker{RecordType: "com.linkedin.restli.common.CreateStatus"}
		if err = checker.CheckField(writer, "status", false, c.Set_Fields.Status != nil, false); err != nil {
			return err
		}
		if err = checker.CheckField(writer, "id", c.Delete_Fields.Id, c.Set_Fields.Id != nil, false); err != nil {
			return err
		}
		if err = checker.CheckField(writer, "location", c.Delete_Fields.Location, c.Set_Fields.Location != nil, false); err != nil {
			return err
		}
		if err = checker.CheckField(writer, "error", c.Delete_Fields.Error, c.Set_Fields.Error != nil, c.Error != nil); err != nil {
			return err
		}
		if checker.HasDeletes {
			err = c.Delete_Fields.MarshalRestLi(keyWriter("$delete"))
			if err != nil {
				return err
			}
		}

		if checker.HasSets {
			err = c.Set_Fields.MarshalRestLi(keyWriter("$set"))
			if err != nil {
				return err
			}
		}

		if c.Error != nil {
			err = c.Error.MarshalRestLiPatch(keyWriter("error"))
			if err != nil {
				return err
			}
		}

		return nil
	})
}

func (c *CreateStatus_PartialUpdate) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		return c.MarshalRestLiPatch(keyWriter(patch.PatchField).SetScope())
	})
}

func (c *CreateStatus_PartialUpdate) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = c.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

func (c *CreateStatus_PartialUpdate) UnmarshalRestLiPatch(reader restlicodec.Reader) (err error) {
	err = reader.ReadMap(func(reader restlicodec.Reader, key string) (err error) {
		switch key {
		case "$delete":
			err = c.Delete_Fields.UnmarshalRestLi(reader)
		case "$set":
			err = c.Set_Fields.UnmarshalRestLi(reader)
		case "error":
			c.Error = new(ErrorResponse_PartialUpdate)
			err = c.Error.UnmarshalRestLiPatch(reader)
		default:
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}
	checker := patch.PartialUpdateFieldChecker{RecordType: "com.linkedin.restli.common.CreateStatus"}
	if err = checker.CheckField(reader, "status", false, c.Set_Fields.Status != nil, false); err != nil {
		return err
	}
	if err = checker.CheckField(reader, "id", c.Delete_Fields.Id, c.Set_Fields.Id != nil, false); err != nil {
		return err
	}
	if err = checker.CheckField(reader, "location", c.Delete_Fields.Location, c.Set_Fields.Location != nil, false); err != nil {
		return err
	}
	if err = checker.CheckField(reader, "error", c.Delete_Fields.Error, c.Set_Fields.Error != nil, c.Error != nil); err != nil {
		return err
	}
	return nil
}

func (c *CreateStatus_PartialUpdate) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	return reader.ReadRecord(patch.RequiredPatchRecordFields, func(reader restlicodec.Reader, field string) (err error) {
		if field == patch.PatchField {
			return c.UnmarshalRestLiPatch(reader)
		} else {
			return reader.Skip()
		}
	})
}

func (c *CreateStatus_PartialUpdate) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, c)
}

func (c *CreateStatus_PartialUpdate) NewInstance() *CreateStatus_PartialUpdate {
	return new(CreateStatus_PartialUpdate)
}
