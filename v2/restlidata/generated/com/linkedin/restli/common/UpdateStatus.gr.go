/*
Code generated by "github.com/PapaCharlie/go-restli/v2"; DO NOT EDIT.

Source file: /Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar
*/

package common

import (
	"github.com/PapaCharlie/go-restli/v2/fnv1a"
	"github.com/PapaCharlie/go-restli/v2/restli/patch"
	"github.com/PapaCharlie/go-restli/v2/restlicodec"
)

// A rest.li update status.
type UpdateStatus struct {
	Status int32

	Error *ErrorResponse
}

func (u *UpdateStatus) Equals(other *UpdateStatus) bool {
	if u == other {
		return true
	}
	if u == nil || other == nil {
		return false
	}

	return u.Status == other.Status &&
		u.Error.Equals(other.Error)
}

func (u *UpdateStatus) ComputeHash() fnv1a.Hash {
	if u == nil {
		return fnv1a.ZeroHash()
	}
	hash := fnv1a.NewHash()

	hash.AddInt32(u.Status)

	if u.Error != nil {
		hash.Add(u.Error.ComputeHash())
	}

	return hash
}

func (u *UpdateStatus) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	if u.Error != nil {
		err = u.Error.MarshalRestLi(keyWriter("error"))
		if err != nil {
			return err
		}
	}
	keyWriter("status").WriteInt32(u.Status)
	return nil
}

func (u *UpdateStatus) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(u.MarshalFields)
}

func (u *UpdateStatus) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = u.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

var UpdateStatusRequiredFields = restlicodec.NewRequiredFields().Add(
	"status",
)

func (u *UpdateStatus) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "status":
		found = true
		u.Status, err = reader.ReadInt32()
	case "error":
		found = true
		u.Error = new(ErrorResponse)
		err = u.Error.UnmarshalRestLi(reader)
	}
	return found, err
}

func (u *UpdateStatus) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	err = reader.ReadRecord(UpdateStatusRequiredFields, func(reader restlicodec.Reader, field string) (err error) {
		found, err := u.UnmarshalField(reader, field)
		if err != nil {
			return err
		}
		if !found {
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}

	return nil
}

func (u *UpdateStatus) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, u)
}

func (u *UpdateStatus) NewInstance() *UpdateStatus {
	return new(UpdateStatus)
}

/*
================================================================================
PARTIAL UPDATE STRUCTS
================================================================================
*/

type UpdateStatus_PartialUpdate_Delete_Fields struct {
	Error bool
}

func (u *UpdateStatus_PartialUpdate_Delete_Fields) MarshalDeleteFields(write func(string)) {
	if u.Error {
		write("error")
	}
}

func (u *UpdateStatus_PartialUpdate_Delete_Fields) UnmarshalDeleteField(field string) (err error) {
	switch field {
	case "status":
		return patch.NewFieldCannotBeDeletedError("status", "com.linkedin.restli.common.UpdateStatus")
	case "error":
		u.Error = true
		return nil
	default:
		return patch.NoSuchFieldErr
	}
}

func (u *UpdateStatus_PartialUpdate) MarshalDeleteFields(itemWriter func() restlicodec.Writer) (err error) {
	write := func(name string) {
		itemWriter().WriteString(name)
	}
	u.Delete_Fields.MarshalDeleteFields(write)
	return nil
}

func (u *UpdateStatus_PartialUpdate) UnmarshalDeleteField(field string) (err error) {
	return u.Delete_Fields.UnmarshalDeleteField(field)
}

type UpdateStatus_PartialUpdate_Set_Fields struct {
	// status
	Status *int32
	// error
	Error *ErrorResponse
}

func (u *UpdateStatus_PartialUpdate_Set_Fields) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	if u.Error != nil {
		err = u.Error.MarshalRestLi(keyWriter("error"))
		if err != nil {
			return err
		}
	}
	if u.Status != nil {
		keyWriter("status").WriteInt32(*u.Status)
	}
	return nil
}

func (u *UpdateStatus_PartialUpdate_Set_Fields) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "status":
		found = true
		u.Status = new(int32)
		*u.Status, err = reader.ReadInt32()
	case "error":
		found = true
		u.Error = new(ErrorResponse)
		err = u.Error.UnmarshalRestLi(reader)
	}
	return found, err
}

func (u *UpdateStatus_PartialUpdate) MarshalSetFields(keyWriter func(string) restlicodec.Writer) (err error) {
	err = u.Set_Fields.MarshalFields(keyWriter)
	return err
}

func (u *UpdateStatus_PartialUpdate) UnmarshalSetField(reader restlicodec.Reader, field string) (found bool, err error) {
	return u.Set_Fields.UnmarshalField(reader, field)
}

// UpdateStatus_PartialUpdate is used to represent a partial update on UpdateStatus. Toggling the value of a field
// in Delete_Field represents selecting it for deletion in a partial update, while
// setting the value of a field in Set_Fields represents setting that field in the
// current struct. Other fields in this struct represent record fields that can
// themselves be partially updated.
type UpdateStatus_PartialUpdate struct {
	Delete_Fields UpdateStatus_PartialUpdate_Delete_Fields
	Set_Fields    UpdateStatus_PartialUpdate_Set_Fields
	Error         *ErrorResponse_PartialUpdate
}

func (u *UpdateStatus_PartialUpdate) CheckFields(fieldChecker *patch.PartialUpdateFieldChecker, keyChecker restlicodec.KeyChecker) (err error) {
	if err = fieldChecker.CheckField(keyChecker, "status", false, u.Set_Fields.Status != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "error", u.Delete_Fields.Error, u.Set_Fields.Error != nil, u.Error != nil); err != nil {
		return err
	}
	return nil
}

func (u *UpdateStatus_PartialUpdate) MarshalRestLiPatch(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		fieldChecker := &patch.PartialUpdateFieldChecker{
			RecordType: "com.linkedin.restli.common.UpdateStatus",
		}
		err = u.CheckFields(fieldChecker, writer)
		if err != nil {
			return err
		}
		if fieldChecker.HasDeletes {
			err = keyWriter("$delete").WriteArray(func(itemWriter func() restlicodec.Writer) (err error) {
				u.MarshalDeleteFields(itemWriter)
				return nil
			})
			if err != nil {
				return err
			}
		}

		if fieldChecker.HasSets {
			err = keyWriter("$set").WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
				return u.MarshalSetFields(keyWriter)
			})
			if err != nil {
				return err
			}
		}

		if u.Error != nil {
			err = u.Error.MarshalRestLiPatch(keyWriter("error"))
			if err != nil {
				return err
			}
		}

		return nil
	})
}

func (u *UpdateStatus_PartialUpdate) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		return u.MarshalRestLiPatch(keyWriter(patch.PatchField).SetScope())
	})
}

func (u *UpdateStatus_PartialUpdate) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = u.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

func (u *UpdateStatus_PartialUpdate) UnmarshalRestLiPatch(reader restlicodec.Reader) (err error) {
	err = reader.ReadMap(func(reader restlicodec.Reader, key string) (err error) {
		switch key {
		case "$delete":
			err = reader.ReadArray(func(reader restlicodec.Reader) (err error) {
				var field string
				field, err = reader.ReadString()
				if err != nil {
					return err
				}

				err = u.UnmarshalDeleteField(field)
				if err == patch.NoSuchFieldErr {
					err = nil
				}
				return err
			})
		case "$set":
			err = reader.ReadMap(func(reader restlicodec.Reader, key string) (err error) {
				found, err := u.UnmarshalSetField(reader, key)
				if !found {
					err = reader.Skip()
				}
				return err
			})
		case "error":
			u.Error = new(ErrorResponse_PartialUpdate)
			err = u.Error.UnmarshalRestLiPatch(reader)
		default:
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}
	fieldChecker := &patch.PartialUpdateFieldChecker{
		RecordType: "com.linkedin.restli.common.UpdateStatus",
	}
	err = u.CheckFields(fieldChecker, reader)
	if err != nil {
		return err
	}
	return nil
}

func (u *UpdateStatus_PartialUpdate) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	return reader.ReadRecord(patch.RequiredPatchRecordFields, func(reader restlicodec.Reader, field string) (err error) {
		if field == patch.PatchField {
			return u.UnmarshalRestLiPatch(reader)
		} else {
			return reader.Skip()
		}
	})
}

func (u *UpdateStatus_PartialUpdate) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, u)
}

func (u *UpdateStatus_PartialUpdate) NewInstance() *UpdateStatus_PartialUpdate {
	return new(UpdateStatus_PartialUpdate)
}
