/*
Code generated by "github.com/PapaCharlie/go-restli/v2"; DO NOT EDIT.

Source file: /Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar
*/

package common

import (
	"github.com/PapaCharlie/go-restli/v2/fnv1a"
	"github.com/PapaCharlie/go-restli/v2/restli/patch"
	"github.com/PapaCharlie/go-restli/v2/restlicodec"
)

// A atom:link-inspired link
type Link struct {
	// The link relation e.g. 'self' or 'next'
	Rel string
	// The link URI
	Href string
	// The type (media type) of the resource
	Type string
}

func (l *Link) Equals(other *Link) bool {
	if l == other {
		return true
	}
	if l == nil || other == nil {
		return false
	}

	return l.Rel == other.Rel &&
		l.Href == other.Href &&
		l.Type == other.Type
}

func (l *Link) ComputeHash() fnv1a.Hash {
	if l == nil {
		return fnv1a.ZeroHash()
	}
	hash := fnv1a.NewHash()

	hash.AddString(l.Rel)

	hash.AddString(l.Href)

	hash.AddString(l.Type)

	return hash
}

func (l *Link) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	keyWriter("href").WriteString(l.Href)
	keyWriter("rel").WriteString(l.Rel)
	keyWriter("type").WriteString(l.Type)
	return nil
}

func (l *Link) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(l.MarshalFields)
}

func (l *Link) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = l.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

var LinkRequiredFields = restlicodec.NewRequiredFields().Add(
	"rel",
	"href",
	"type",
)

func (l *Link) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "rel":
		found = true
		l.Rel, err = reader.ReadString()
	case "href":
		found = true
		l.Href, err = reader.ReadString()
	case "type":
		found = true
		l.Type, err = reader.ReadString()
	}
	return found, err
}

func (l *Link) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	err = reader.ReadRecord(LinkRequiredFields, func(reader restlicodec.Reader, field string) (err error) {
		found, err := l.UnmarshalField(reader, field)
		if err != nil {
			return err
		}
		if !found {
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}

	return nil
}

func (l *Link) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, l)
}

func (l *Link) NewInstance() *Link {
	return new(Link)
}

/*
================================================================================
PARTIAL UPDATE STRUCTS
================================================================================
*/

type Link_PartialUpdate_Delete_Fields struct{}

func (l *Link_PartialUpdate_Delete_Fields) MarshalDeleteFields(write func(string)) {}

func (l *Link_PartialUpdate_Delete_Fields) UnmarshalDeleteField(field string) (err error) {
	switch field {
	case "rel":
		return patch.NewFieldCannotBeDeletedError("rel", "com.linkedin.restli.common.Link")
	case "href":
		return patch.NewFieldCannotBeDeletedError("href", "com.linkedin.restli.common.Link")
	case "type":
		return patch.NewFieldCannotBeDeletedError("type", "com.linkedin.restli.common.Link")
	default:
		return patch.NoSuchFieldErr
	}
}

func (l *Link_PartialUpdate) MarshalDeleteFields(itemWriter func() restlicodec.Writer) (err error) {
	write := func(name string) {
		itemWriter().WriteString(name)
	}
	l.Delete_Fields.MarshalDeleteFields(write)
	return nil
}

func (l *Link_PartialUpdate) UnmarshalDeleteField(field string) (err error) {
	return l.Delete_Fields.UnmarshalDeleteField(field)
}

type Link_PartialUpdate_Set_Fields struct {
	// rel
	Rel *string
	// href
	Href *string
	// type
	Type *string
}

func (l *Link_PartialUpdate_Set_Fields) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	if l.Href != nil {
		keyWriter("href").WriteString(*l.Href)
	}
	if l.Rel != nil {
		keyWriter("rel").WriteString(*l.Rel)
	}
	if l.Type != nil {
		keyWriter("type").WriteString(*l.Type)
	}
	return nil
}

func (l *Link_PartialUpdate_Set_Fields) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "rel":
		found = true
		l.Rel = new(string)
		*l.Rel, err = reader.ReadString()
	case "href":
		found = true
		l.Href = new(string)
		*l.Href, err = reader.ReadString()
	case "type":
		found = true
		l.Type = new(string)
		*l.Type, err = reader.ReadString()
	}
	return found, err
}

func (l *Link_PartialUpdate) MarshalSetFields(keyWriter func(string) restlicodec.Writer) (err error) {
	err = l.Set_Fields.MarshalFields(keyWriter)
	return err
}

func (l *Link_PartialUpdate) UnmarshalSetField(reader restlicodec.Reader, field string) (found bool, err error) {
	return l.Set_Fields.UnmarshalField(reader, field)
}

// Link_PartialUpdate is used to represent a partial update on Link. Toggling the value of a field
// in Delete_Field represents selecting it for deletion in a partial update, while
// setting the value of a field in Set_Fields represents setting that field in the
// current struct. Other fields in this struct represent record fields that can
// themselves be partially updated.
type Link_PartialUpdate struct {
	Delete_Fields Link_PartialUpdate_Delete_Fields
	Set_Fields    Link_PartialUpdate_Set_Fields
}

func (l *Link_PartialUpdate) CheckFields(fieldChecker *patch.PartialUpdateFieldChecker, keyChecker restlicodec.KeyChecker) (err error) {
	if err = fieldChecker.CheckField(keyChecker, "rel", false, l.Set_Fields.Rel != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "href", false, l.Set_Fields.Href != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "type", false, l.Set_Fields.Type != nil, false); err != nil {
		return err
	}
	return nil
}

func (l *Link_PartialUpdate) MarshalRestLiPatch(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		fieldChecker := &patch.PartialUpdateFieldChecker{
			RecordType: "com.linkedin.restli.common.Link",
		}
		err = l.CheckFields(fieldChecker, writer)
		if err != nil {
			return err
		}
		if fieldChecker.HasDeletes {
			err = keyWriter("$delete").WriteArray(func(itemWriter func() restlicodec.Writer) (err error) {
				l.MarshalDeleteFields(itemWriter)
				return nil
			})
			if err != nil {
				return err
			}
		}

		if fieldChecker.HasSets {
			err = keyWriter("$set").WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
				return l.MarshalSetFields(keyWriter)
			})
			if err != nil {
				return err
			}
		}

		return nil
	})
}

func (l *Link_PartialUpdate) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		return l.MarshalRestLiPatch(keyWriter(patch.PatchField).SetScope())
	})
}

func (l *Link_PartialUpdate) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = l.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

func (l *Link_PartialUpdate) UnmarshalRestLiPatch(reader restlicodec.Reader) (err error) {
	err = reader.ReadMap(func(reader restlicodec.Reader, key string) (err error) {
		switch key {
		case "$delete":
			err = reader.ReadArray(func(reader restlicodec.Reader) (err error) {
				var field string
				field, err = reader.ReadString()
				if err != nil {
					return err
				}

				err = l.UnmarshalDeleteField(field)
				if err == patch.NoSuchFieldErr {
					err = nil
				}
				return err
			})
		case "$set":
			err = reader.ReadMap(func(reader restlicodec.Reader, key string) (err error) {
				found, err := l.UnmarshalSetField(reader, key)
				if !found {
					err = reader.Skip()
				}
				return err
			})
		default:
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}
	fieldChecker := &patch.PartialUpdateFieldChecker{
		RecordType: "com.linkedin.restli.common.Link",
	}
	err = l.CheckFields(fieldChecker, reader)
	if err != nil {
		return err
	}
	return nil
}

func (l *Link_PartialUpdate) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	return reader.ReadRecord(patch.RequiredPatchRecordFields, func(reader restlicodec.Reader, field string) (err error) {
		if field == patch.PatchField {
			return l.UnmarshalRestLiPatch(reader)
		} else {
			return reader.Skip()
		}
	})
}

func (l *Link_PartialUpdate) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, l)
}

func (l *Link_PartialUpdate) NewInstance() *Link_PartialUpdate {
	return new(Link_PartialUpdate)
}
