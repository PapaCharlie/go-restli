/*
Code generated by "github.com/PapaCharlie/go-restli/v2"; DO NOT EDIT.

Source file: /Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar
*/

package common

import (
	"github.com/PapaCharlie/go-restli/v2/fnv1a"
	"github.com/PapaCharlie/go-restli/v2/restli/equals"
	"github.com/PapaCharlie/go-restli/v2/restli/patch"
	"github.com/PapaCharlie/go-restli/v2/restlicodec"
)

// A generic ErrorResponse
type ErrorResponse struct {
	// The HTTP status code.
	Status *int32
	// A service-specific error code.
	ServiceErrorCode *int32
	// The canonical error code, e.g. for '400 Bad Request' it can be 'INPUT_VALIDATION_FAILED'. Only predefined codes should be used.
	Code *string
	// A human-readable explanation of the error.
	Message *string
	// URL to a page that describes this particular error in more detail.
	DocUrl *string
	// The unique identifier that would identify this error. For example, it can be used to identify requests in the service's logs.
	RequestId *string
	// The FQCN of the exception thrown by the server.
	ExceptionClass *string
	// The full stack trace of the exception thrown by the server.
	StackTrace *string
	// The type of the error detail model, e.g. com.example.api.BadRequest. Clients can use this field to identify the actual error detail schema.
	ErrorDetailType *string
	// This field should be used for communicating extra error details to clients.
	ErrorDetails *ErrorDetails
}

func (e *ErrorResponse) Equals(other *ErrorResponse) bool {
	if e == other {
		return true
	}
	if e == nil || other == nil {
		return false
	}

	return equals.ComparablePointer(e.Status, other.Status) &&
		equals.ComparablePointer(e.ServiceErrorCode, other.ServiceErrorCode) &&
		equals.ComparablePointer(e.Code, other.Code) &&
		equals.ComparablePointer(e.Message, other.Message) &&
		equals.ComparablePointer(e.DocUrl, other.DocUrl) &&
		equals.ComparablePointer(e.RequestId, other.RequestId) &&
		equals.ComparablePointer(e.ExceptionClass, other.ExceptionClass) &&
		equals.ComparablePointer(e.StackTrace, other.StackTrace) &&
		equals.ComparablePointer(e.ErrorDetailType, other.ErrorDetailType) &&
		e.ErrorDetails.Equals(other.ErrorDetails)
}

func (e *ErrorResponse) ComputeHash() fnv1a.Hash {
	if e == nil {
		return fnv1a.ZeroHash()
	}
	hash := fnv1a.NewHash()

	if e.Status != nil {
		hash.AddInt32(*e.Status)
	}

	if e.ServiceErrorCode != nil {
		hash.AddInt32(*e.ServiceErrorCode)
	}

	if e.Code != nil {
		hash.AddString(*e.Code)
	}

	if e.Message != nil {
		hash.AddString(*e.Message)
	}

	if e.DocUrl != nil {
		hash.AddString(*e.DocUrl)
	}

	if e.RequestId != nil {
		hash.AddString(*e.RequestId)
	}

	if e.ExceptionClass != nil {
		hash.AddString(*e.ExceptionClass)
	}

	if e.StackTrace != nil {
		hash.AddString(*e.StackTrace)
	}

	if e.ErrorDetailType != nil {
		hash.AddString(*e.ErrorDetailType)
	}

	if e.ErrorDetails != nil {
		hash.Add(e.ErrorDetails.ComputeHash())
	}

	return hash
}

func (e *ErrorResponse) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	if e.Code != nil {
		keyWriter("code").WriteString(*e.Code)
	}
	if e.DocUrl != nil {
		keyWriter("docUrl").WriteString(*e.DocUrl)
	}
	if e.ErrorDetailType != nil {
		keyWriter("errorDetailType").WriteString(*e.ErrorDetailType)
	}
	if e.ErrorDetails != nil {
		err = e.ErrorDetails.MarshalRestLi(keyWriter("errorDetails"))
		if err != nil {
			return err
		}
	}
	if e.ExceptionClass != nil {
		keyWriter("exceptionClass").WriteString(*e.ExceptionClass)
	}
	if e.Message != nil {
		keyWriter("message").WriteString(*e.Message)
	}
	if e.RequestId != nil {
		keyWriter("requestId").WriteString(*e.RequestId)
	}
	if e.ServiceErrorCode != nil {
		keyWriter("serviceErrorCode").WriteInt32(*e.ServiceErrorCode)
	}
	if e.StackTrace != nil {
		keyWriter("stackTrace").WriteString(*e.StackTrace)
	}
	if e.Status != nil {
		keyWriter("status").WriteInt32(*e.Status)
	}
	return nil
}

func (e *ErrorResponse) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(e.MarshalFields)
}

func (e *ErrorResponse) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = e.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

var ErrorResponseRequiredFields = restlicodec.NewRequiredFields()

func (e *ErrorResponse) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "status":
		found = true
		e.Status = new(int32)
		*e.Status, err = reader.ReadInt32()
	case "serviceErrorCode":
		found = true
		e.ServiceErrorCode = new(int32)
		*e.ServiceErrorCode, err = reader.ReadInt32()
	case "code":
		found = true
		e.Code = new(string)
		*e.Code, err = reader.ReadString()
	case "message":
		found = true
		e.Message = new(string)
		*e.Message, err = reader.ReadString()
	case "docUrl":
		found = true
		e.DocUrl = new(string)
		*e.DocUrl, err = reader.ReadString()
	case "requestId":
		found = true
		e.RequestId = new(string)
		*e.RequestId, err = reader.ReadString()
	case "exceptionClass":
		found = true
		e.ExceptionClass = new(string)
		*e.ExceptionClass, err = reader.ReadString()
	case "stackTrace":
		found = true
		e.StackTrace = new(string)
		*e.StackTrace, err = reader.ReadString()
	case "errorDetailType":
		found = true
		e.ErrorDetailType = new(string)
		*e.ErrorDetailType, err = reader.ReadString()
	case "errorDetails":
		found = true
		e.ErrorDetails = new(ErrorDetails)
		err = e.ErrorDetails.UnmarshalRestLi(reader)
	}
	return found, err
}

func (e *ErrorResponse) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	err = reader.ReadRecord(ErrorResponseRequiredFields, func(reader restlicodec.Reader, field string) (err error) {
		found, err := e.UnmarshalField(reader, field)
		if err != nil {
			return err
		}
		if !found {
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}

	return nil
}

func (e *ErrorResponse) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, e)
}

func (e *ErrorResponse) NewInstance() *ErrorResponse {
	return new(ErrorResponse)
}

/*
================================================================================
PARTIAL UPDATE STRUCTS
================================================================================
*/

type ErrorResponse_PartialUpdate_Delete_Fields struct {
	Status           bool
	ServiceErrorCode bool
	Code             bool
	Message          bool
	DocUrl           bool
	RequestId        bool
	ExceptionClass   bool
	StackTrace       bool
	ErrorDetailType  bool
	ErrorDetails     bool
}

func (e *ErrorResponse_PartialUpdate_Delete_Fields) MarshalDeleteFields(write func(string)) {
	if e.Code {
		write("code")
	}
	if e.DocUrl {
		write("docUrl")
	}
	if e.ErrorDetailType {
		write("errorDetailType")
	}
	if e.ErrorDetails {
		write("errorDetails")
	}
	if e.ExceptionClass {
		write("exceptionClass")
	}
	if e.Message {
		write("message")
	}
	if e.RequestId {
		write("requestId")
	}
	if e.ServiceErrorCode {
		write("serviceErrorCode")
	}
	if e.StackTrace {
		write("stackTrace")
	}
	if e.Status {
		write("status")
	}
}

func (e *ErrorResponse_PartialUpdate_Delete_Fields) UnmarshalDeleteField(field string) (err error) {
	switch field {
	case "status":
		e.Status = true
		return nil
	case "serviceErrorCode":
		e.ServiceErrorCode = true
		return nil
	case "code":
		e.Code = true
		return nil
	case "message":
		e.Message = true
		return nil
	case "docUrl":
		e.DocUrl = true
		return nil
	case "requestId":
		e.RequestId = true
		return nil
	case "exceptionClass":
		e.ExceptionClass = true
		return nil
	case "stackTrace":
		e.StackTrace = true
		return nil
	case "errorDetailType":
		e.ErrorDetailType = true
		return nil
	case "errorDetails":
		e.ErrorDetails = true
		return nil
	default:
		return patch.NoSuchFieldErr
	}
}

func (e *ErrorResponse_PartialUpdate) MarshalDeleteFields(itemWriter func() restlicodec.Writer) (err error) {
	write := func(name string) {
		itemWriter().WriteString(name)
	}
	e.Delete_Fields.MarshalDeleteFields(write)
	return nil
}

func (e *ErrorResponse_PartialUpdate) UnmarshalDeleteField(field string) (err error) {
	return e.Delete_Fields.UnmarshalDeleteField(field)
}

type ErrorResponse_PartialUpdate_Set_Fields struct {
	// status
	Status *int32
	// serviceErrorCode
	ServiceErrorCode *int32
	// code
	Code *string
	// message
	Message *string
	// docUrl
	DocUrl *string
	// requestId
	RequestId *string
	// exceptionClass
	ExceptionClass *string
	// stackTrace
	StackTrace *string
	// errorDetailType
	ErrorDetailType *string
	// errorDetails
	ErrorDetails *ErrorDetails
}

func (e *ErrorResponse_PartialUpdate_Set_Fields) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	if e.Code != nil {
		keyWriter("code").WriteString(*e.Code)
	}
	if e.DocUrl != nil {
		keyWriter("docUrl").WriteString(*e.DocUrl)
	}
	if e.ErrorDetailType != nil {
		keyWriter("errorDetailType").WriteString(*e.ErrorDetailType)
	}
	if e.ErrorDetails != nil {
		err = e.ErrorDetails.MarshalRestLi(keyWriter("errorDetails"))
		if err != nil {
			return err
		}
	}
	if e.ExceptionClass != nil {
		keyWriter("exceptionClass").WriteString(*e.ExceptionClass)
	}
	if e.Message != nil {
		keyWriter("message").WriteString(*e.Message)
	}
	if e.RequestId != nil {
		keyWriter("requestId").WriteString(*e.RequestId)
	}
	if e.ServiceErrorCode != nil {
		keyWriter("serviceErrorCode").WriteInt32(*e.ServiceErrorCode)
	}
	if e.StackTrace != nil {
		keyWriter("stackTrace").WriteString(*e.StackTrace)
	}
	if e.Status != nil {
		keyWriter("status").WriteInt32(*e.Status)
	}
	return nil
}

func (e *ErrorResponse_PartialUpdate_Set_Fields) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "status":
		found = true
		e.Status = new(int32)
		*e.Status, err = reader.ReadInt32()
	case "serviceErrorCode":
		found = true
		e.ServiceErrorCode = new(int32)
		*e.ServiceErrorCode, err = reader.ReadInt32()
	case "code":
		found = true
		e.Code = new(string)
		*e.Code, err = reader.ReadString()
	case "message":
		found = true
		e.Message = new(string)
		*e.Message, err = reader.ReadString()
	case "docUrl":
		found = true
		e.DocUrl = new(string)
		*e.DocUrl, err = reader.ReadString()
	case "requestId":
		found = true
		e.RequestId = new(string)
		*e.RequestId, err = reader.ReadString()
	case "exceptionClass":
		found = true
		e.ExceptionClass = new(string)
		*e.ExceptionClass, err = reader.ReadString()
	case "stackTrace":
		found = true
		e.StackTrace = new(string)
		*e.StackTrace, err = reader.ReadString()
	case "errorDetailType":
		found = true
		e.ErrorDetailType = new(string)
		*e.ErrorDetailType, err = reader.ReadString()
	case "errorDetails":
		found = true
		e.ErrorDetails = new(ErrorDetails)
		err = e.ErrorDetails.UnmarshalRestLi(reader)
	}
	return found, err
}

func (e *ErrorResponse_PartialUpdate) MarshalSetFields(keyWriter func(string) restlicodec.Writer) (err error) {
	err = e.Set_Fields.MarshalFields(keyWriter)
	return err
}

func (e *ErrorResponse_PartialUpdate) UnmarshalSetField(reader restlicodec.Reader, field string) (found bool, err error) {
	return e.Set_Fields.UnmarshalField(reader, field)
}

// ErrorResponse_PartialUpdate is used to represent a partial update on ErrorResponse. Toggling the value of a field
// in Delete_Field represents selecting it for deletion in a partial update, while
// setting the value of a field in Set_Fields represents setting that field in the
// current struct. Other fields in this struct represent record fields that can
// themselves be partially updated.
type ErrorResponse_PartialUpdate struct {
	Delete_Fields ErrorResponse_PartialUpdate_Delete_Fields
	Set_Fields    ErrorResponse_PartialUpdate_Set_Fields
	ErrorDetails  *ErrorDetails_PartialUpdate
}

func (e *ErrorResponse_PartialUpdate) CheckFields(fieldChecker *patch.PartialUpdateFieldChecker, keyChecker restlicodec.KeyChecker) (err error) {
	if err = fieldChecker.CheckField(keyChecker, "status", e.Delete_Fields.Status, e.Set_Fields.Status != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "serviceErrorCode", e.Delete_Fields.ServiceErrorCode, e.Set_Fields.ServiceErrorCode != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "code", e.Delete_Fields.Code, e.Set_Fields.Code != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "message", e.Delete_Fields.Message, e.Set_Fields.Message != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "docUrl", e.Delete_Fields.DocUrl, e.Set_Fields.DocUrl != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "requestId", e.Delete_Fields.RequestId, e.Set_Fields.RequestId != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "exceptionClass", e.Delete_Fields.ExceptionClass, e.Set_Fields.ExceptionClass != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "stackTrace", e.Delete_Fields.StackTrace, e.Set_Fields.StackTrace != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "errorDetailType", e.Delete_Fields.ErrorDetailType, e.Set_Fields.ErrorDetailType != nil, false); err != nil {
		return err
	}
	if err = fieldChecker.CheckField(keyChecker, "errorDetails", e.Delete_Fields.ErrorDetails, e.Set_Fields.ErrorDetails != nil, e.ErrorDetails != nil); err != nil {
		return err
	}
	return nil
}

func (e *ErrorResponse_PartialUpdate) MarshalRestLiPatch(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		fieldChecker := &patch.PartialUpdateFieldChecker{
			RecordType: "com.linkedin.restli.common.ErrorResponse",
		}
		err = e.CheckFields(fieldChecker, writer)
		if err != nil {
			return err
		}
		if fieldChecker.HasDeletes {
			err = keyWriter("$delete").WriteArray(func(itemWriter func() restlicodec.Writer) (err error) {
				e.MarshalDeleteFields(itemWriter)
				return nil
			})
			if err != nil {
				return err
			}
		}

		if fieldChecker.HasSets {
			err = keyWriter("$set").WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
				return e.MarshalSetFields(keyWriter)
			})
			if err != nil {
				return err
			}
		}

		if e.ErrorDetails != nil {
			err = e.ErrorDetails.MarshalRestLiPatch(keyWriter("errorDetails"))
			if err != nil {
				return err
			}
		}

		return nil
	})
}

func (e *ErrorResponse_PartialUpdate) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		return e.MarshalRestLiPatch(keyWriter(patch.PatchField).SetScope())
	})
}

func (e *ErrorResponse_PartialUpdate) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = e.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

func (e *ErrorResponse_PartialUpdate) UnmarshalRestLiPatch(reader restlicodec.Reader) (err error) {
	err = reader.ReadMap(func(reader restlicodec.Reader, key string) (err error) {
		switch key {
		case "$delete":
			err = reader.ReadArray(func(reader restlicodec.Reader) (err error) {
				var field string
				field, err = reader.ReadString()
				if err != nil {
					return err
				}

				err = e.UnmarshalDeleteField(field)
				if err == patch.NoSuchFieldErr {
					err = nil
				}
				return err
			})
		case "$set":
			err = reader.ReadMap(func(reader restlicodec.Reader, key string) (err error) {
				found, err := e.UnmarshalSetField(reader, key)
				if !found {
					err = reader.Skip()
				}
				return err
			})
		case "errorDetails":
			e.ErrorDetails = new(ErrorDetails_PartialUpdate)
			err = e.ErrorDetails.UnmarshalRestLiPatch(reader)
		default:
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}
	fieldChecker := &patch.PartialUpdateFieldChecker{
		RecordType: "com.linkedin.restli.common.ErrorResponse",
	}
	err = e.CheckFields(fieldChecker, reader)
	if err != nil {
		return err
	}
	return nil
}

func (e *ErrorResponse_PartialUpdate) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	return reader.ReadRecord(patch.RequiredPatchRecordFields, func(reader restlicodec.Reader, field string) (err error) {
		if field == patch.PatchField {
			return e.UnmarshalRestLiPatch(reader)
		} else {
			return reader.Skip()
		}
	})
}

func (e *ErrorResponse_PartialUpdate) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, e)
}

func (e *ErrorResponse_PartialUpdate) NewInstance() *ErrorResponse_PartialUpdate {
	return new(ErrorResponse_PartialUpdate)
}
