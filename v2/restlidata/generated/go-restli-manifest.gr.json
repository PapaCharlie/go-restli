{
  "packageRoot": "github.com/PapaCharlie/go-restli/v2/restlidata/generated",
  "inputDataTypes": [
    {
      "record": {
        "name": "UpdateStatus",
        "namespace": "com.linkedin.restli.common",
        "sourceFile": "/Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar",
        "doc": "A rest.li update status.",
        "includes": [],
        "fields": [
          {
            "name": "status",
            "doc": "",
            "type": {
              "primitive": "int32"
            },
            "isOptional": false
          },
          {
            "name": "error",
            "doc": "",
            "type": {
              "reference": {
                "name": "ErrorResponse",
                "namespace": "com.linkedin.restli.common"
              }
            },
            "isOptional": true
          }
        ]
      }
    },
    {
      "record": {
        "name": "ExtensionSchemaAnnotation",
        "namespace": "com.linkedin.restli.common",
        "sourceFile": "/Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar",
        "doc": "Specifies the extension schema annotation configuration for defining the entity relationship among entities.",
        "includes": [],
        "fields": [
          {
            "name": "using",
            "doc": "Specifies only for one to many relationship. It can use either GET_ALL(\"get_all\") or a FINDER(\"finder:\u003cmethod name\u003e\").",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "params",
            "doc": "Specifies parameters if any of them are specified. It is also used for FINDER.",
            "type": {
              "map": {
                "primitive": "string"
              }
            },
            "isOptional": true
          },
          {
            "name": "versionSuffix",
            "doc": "Specifies versionSuffix in multi-version scenario. If is is not provided, will pick first version by default.",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          }
        ]
      }
    },
    {
      "record": {
        "name": "Link",
        "namespace": "com.linkedin.restli.common",
        "sourceFile": "/Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar",
        "doc": "A atom:link-inspired link",
        "includes": [],
        "fields": [
          {
            "name": "rel",
            "doc": "The link relation e.g. 'self' or 'next'",
            "type": {
              "primitive": "string"
            },
            "isOptional": false
          },
          {
            "name": "href",
            "doc": "The link URI",
            "type": {
              "primitive": "string"
            },
            "isOptional": false
          },
          {
            "name": "type",
            "doc": "The type (media type) of the resource",
            "type": {
              "primitive": "string"
            },
            "isOptional": false
          }
        ]
      }
    },
    {
      "record": {
        "name": "ErrorResponse",
        "namespace": "com.linkedin.restli.common",
        "sourceFile": "/Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar",
        "doc": "A generic ErrorResponse",
        "includes": [],
        "fields": [
          {
            "name": "status",
            "doc": "The HTTP status code.",
            "type": {
              "primitive": "int32"
            },
            "isOptional": true
          },
          {
            "name": "serviceErrorCode",
            "doc": "A service-specific error code.",
            "type": {
              "primitive": "int32"
            },
            "isOptional": true
          },
          {
            "name": "code",
            "doc": "The canonical error code, e.g. for '400 Bad Request' it can be 'INPUT_VALIDATION_FAILED'. Only predefined codes should be used.",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "message",
            "doc": "A human-readable explanation of the error.",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "docUrl",
            "doc": "URL to a page that describes this particular error in more detail.",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "requestId",
            "doc": "The unique identifier that would identify this error. For example, it can be used to identify requests in the service's logs.",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "exceptionClass",
            "doc": "The FQCN of the exception thrown by the server.",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "stackTrace",
            "doc": "The full stack trace of the exception thrown by the server.",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "errorDetailType",
            "doc": "The type of the error detail model, e.g. com.example.api.BadRequest. Clients can use this field to identify the actual error detail schema.",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "errorDetails",
            "doc": "This field should be used for communicating extra error details to clients.",
            "type": {
              "reference": {
                "name": "ErrorDetails",
                "namespace": "com.linkedin.restli.common"
              }
            },
            "isOptional": true
          }
        ]
      }
    },
    {
      "record": {
        "name": "CreateStatus",
        "namespace": "com.linkedin.restli.common",
        "sourceFile": "/Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar",
        "doc": "A rest.li create status.",
        "includes": [],
        "fields": [
          {
            "name": "status",
            "doc": "",
            "type": {
              "primitive": "int32"
            },
            "isOptional": false
          },
          {
            "name": "id",
            "doc": "",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "location",
            "doc": "The location url to retrieve the newly created entity",
            "type": {
              "primitive": "string"
            },
            "isOptional": true
          },
          {
            "name": "error",
            "doc": "",
            "type": {
              "reference": {
                "name": "ErrorResponse",
                "namespace": "com.linkedin.restli.common"
              }
            },
            "isOptional": true
          }
        ]
      }
    },
    {
      "record": {
        "name": "PegasusSchema",
        "namespace": "com.linkedin.restli.common",
        "sourceFile": "/Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar",
        "doc": "A \"marker\" data schema for data that is itself a data schema (a \"PDSC for PDSCs\"). Because PDSC is not expressive enough to describe it's own format, this is only a marker, and has no fields. Despite having no fields, it is required that data marked with this schema be non-empty. Specifically, is required that data marked as using this schema fully conform to the PDSC format (https://github.com/linkedin/rest.li/wiki/DATA-Data-Schema-and-Templates#schema-definition).",
        "includes": [],
        "fields": []
      }
    },
    {
      "record": {
        "name": "ErrorDetails",
        "namespace": "com.linkedin.restli.common",
        "sourceFile": "/Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar",
        "doc": "",
        "includes": [],
        "fields": []
      }
    },
    {
      "record": {
        "name": "CollectionMetadata",
        "namespace": "com.linkedin.restli.common",
        "sourceFile": "/Users/pchesnai/code/personal/go-restli/v2/go-restli-spec-parser.jar",
        "doc": "Metadata and pagination links for this collection",
        "includes": [],
        "fields": [
          {
            "name": "start",
            "doc": "The start index of this collection",
            "type": {
              "primitive": "int32"
            },
            "isOptional": false
          },
          {
            "name": "count",
            "doc": "The number of elements in this collection segment",
            "type": {
              "primitive": "int32"
            },
            "isOptional": false
          },
          {
            "name": "total",
            "doc": "The total number of elements in the entire collection (not just this segment)",
            "type": {
              "primitive": "int32"
            },
            "isOptional": false,
            "defaultValue": "0"
          },
          {
            "name": "links",
            "doc": "",
            "type": {
              "array": {
                "reference": {
                  "name": "Link",
                  "namespace": "com.linkedin.restli.common"
                }
              }
            },
            "isOptional": false
          }
        ]
      }
    }
  ],
  "dependencyDataTypes": [],
  "resources": []
}