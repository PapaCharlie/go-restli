/*
Code generated by "github.com/PapaCharlie/go-restli"; DO NOT EDIT.

Source file: https://github.com/PapaCharlie/go-restli/blob/master/codegen/resources/pagingcontext.go
*/

package restlidata

import (
	"github.com/PapaCharlie/go-restli/fnv1a"
	"github.com/PapaCharlie/go-restli/restli/equals"
	"github.com/PapaCharlie/go-restli/restlicodec"
)

type PagingContext struct {
	Start *int32

	Count *int32
}

func (p *PagingContext) Equals(other *PagingContext) bool {
	if p == other {
		return true
	}
	if p == nil || other == nil {
		return false
	}

	return equals.ComparablePointer(p.Start, other.Start) &&
		equals.ComparablePointer(p.Count, other.Count)
}

func (p *PagingContext) ComputeHash() fnv1a.Hash {
	if p == nil {
		return fnv1a.ZeroHash()
	}
	hash := fnv1a.NewHash()

	if p.Start != nil {
		hash.AddInt32(*p.Start)
	}

	if p.Count != nil {
		hash.AddInt32(*p.Count)
	}

	return hash
}

func (p *PagingContext) EncodeQueryParams() (rawQuery string, err error) {
	writer := restlicodec.NewRestLiQueryParamsWriter()
	err = writer.WriteParams(func(paramNameWriter func(string) restlicodec.Writer) (err error) {
		if p.Count != nil {
			paramNameWriter("count").WriteInt32(*p.Count)
		}
		if p.Start != nil {
			paramNameWriter("start").WriteInt32(*p.Start)
		}
		return nil
	})
	if err != nil {
		return "", err
	}
	return writer.Finalize(), nil
}
