/*
Code generated by "github.com/PapaCharlie/go-restli"; DO NOT EDIT.

Source file: https://github.com/PapaCharlie/go-restli/blob/master/codegen/resources/pagingcontext.go
*/

package restlidata

import (
	"github.com/PapaCharlie/go-restli/fnv1a"
	"github.com/PapaCharlie/go-restli/restli/equals"
	"github.com/PapaCharlie/go-restli/restlicodec"
)

type PagingContext struct {
	Start *int32

	Count *int32
}

func (p *PagingContext) Equals(other *PagingContext) bool {
	if p == other {
		return true
	}
	if p == nil || other == nil {
		return false
	}

	return equals.ComparablePointer(p.Start, other.Start) &&
		equals.ComparablePointer(p.Count, other.Count)
}

func (p *PagingContext) ComputeHash() fnv1a.Hash {
	if p == nil {
		return fnv1a.ZeroHash()
	}
	hash := fnv1a.NewHash()

	if p.Start != nil {
		hash.AddInt32(*p.Start)
	}

	if p.Count != nil {
		hash.AddInt32(*p.Count)
	}

	return hash
}

func (p *PagingContext) MarshalFields(keyWriter func(string) restlicodec.Writer) (err error) {
	if p.Count != nil {
		keyWriter("count").WriteInt32(*p.Count)
	}
	if p.Start != nil {
		keyWriter("start").WriteInt32(*p.Start)
	}
	return nil
}

func (p *PagingContext) EncodeQueryParams() (rawQuery string, err error) {
	return restlicodec.BuildQueryParams(func(paramNameWriter func(string) restlicodec.Writer) (err error) {
		return p.MarshalFields(paramNameWriter)
	})
}

var PagingContextRequiredFields = restlicodec.NewRequiredFields()

func (p *PagingContext) NewInstance() *PagingContext {
	return new(PagingContext)
}

func (p *PagingContext) UnmarshalField(reader restlicodec.Reader, field string) (found bool, err error) {
	switch field {
	case "start":
		found = true
		p.Start = new(int32)
		*p.Start, err = reader.ReadInt32()
	case "count":
		found = true
		p.Count = new(int32)
		*p.Count, err = reader.ReadInt32()
	}
	return found, err
}

func (p *PagingContext) DecodeQueryParams(reader restlicodec.QueryParamsReader) (err error) {
	err = reader.ReadRecord(PagingContextRequiredFields, func(reader restlicodec.Reader, field string) (err error) {
		found, err := p.UnmarshalField(reader, field)
		if err != nil {
			return err
		}
		if !found {
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}

	return nil
}
