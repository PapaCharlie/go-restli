/*
DO NOT EDIT

Code automatically generated by github.com/PapaCharlie/go-restli
Source file: https://github.com/PapaCharlie/go-restli/blob/master/codegen/resources/restlidata.go
*/

package restlidata

import (
	fnv1a "github.com/PapaCharlie/go-restli/fnv1a"
	restlicodec "github.com/PapaCharlie/go-restli/restlicodec"
)

type Link struct {
	// The link relation e.g. 'self' or 'next'
	Rel string
	// The link URI
	Href string
	// The type (media type) of the resource
	Type string
}

func (l *Link) Equals(other *Link) bool {
	if l == other {
		return true
	}
	if l == nil || other == nil {
		return false
	}

	return l.Rel == other.Rel &&
		l.Href == other.Href &&
		l.Type == other.Type
}

func (l *Link) ComputeHash() fnv1a.Hash {
	if l == nil {
		return fnv1a.ZeroHash()
	}
	hash := fnv1a.NewHash()

	hash.AddString(l.Rel)

	hash.AddString(l.Href)

	hash.AddString(l.Type)

	return hash
}

func (l *Link) MarshalRestLi(writer restlicodec.Writer) (err error) {
	return writer.WriteMap(func(keyWriter func(string) restlicodec.Writer) (err error) {
		keyWriter("href").WriteString(l.Href)
		keyWriter("rel").WriteString(l.Rel)
		keyWriter("type").WriteString(l.Type)
		return nil
	})
}

func (l *Link) MarshalJSON() (data []byte, err error) {
	writer := restlicodec.NewCompactJsonWriter()
	err = l.MarshalRestLi(writer)
	if err != nil {
		return nil, err
	}
	return []byte(writer.Finalize()), nil
}

var _LinkRequiredFields = restlicodec.RequiredFields{
	"rel",
	"href",
	"type",
}

func (l *Link) NewInstance() *Link {
	return new(Link)
}

func (l *Link) UnmarshalRestLi(reader restlicodec.Reader) (err error) {
	err = reader.ReadRecord(_LinkRequiredFields, func(reader restlicodec.Reader, field string) (err error) {
		switch field {
		case "rel":
			l.Rel, err = reader.ReadString()
		case "href":
			l.Href, err = reader.ReadString()
		case "type":
			l.Type, err = reader.ReadString()
		default:
			err = reader.Skip()
		}
		return err
	})
	if err != nil {
		return err
	}

	return err
}

func (l *Link) UnmarshalJSON(data []byte) error {
	return restlicodec.UnmarshalJSON(data, l)
}
